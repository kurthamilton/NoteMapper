@page "/"
@inherits NoteMapperComponentBase
@attribute [Authorize]
@using System.Linq;
@using NoteMapper.Core
@using NoteMapper.Core.Extensions
@using NoteMapper.Core.Instruments
@using NoteMapper.Core.MusicTheory
@using NoteMapper.Data.Core.Users;
@using NoteMapper.Services
@using NoteMapper.Services.Instruments;
@using NoteMapper.Services.Web
@using NoteMapper.Services.Web.ViewModels
@using NoteMapper.Services.Web.ViewModels.Instruments
@using NoteMapper.Services.Web.ViewModels.NoteMap
@using NoteMapper.Web.Blazor.Extensions
@using NoteMapper.Web.Blazor.Models.NoteMap;
@using NoteMapper.Web.Blazor.Shared.NoteMap
@using NoteMapper.Web.Blazor.Shared.Shared

@if (CriteriaOptions == null)
{
    <Loading />
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <NoteMapCriteria Model="@Criteria" Options="@CriteriaOptions" OnChange="OnCriteriaChange" />
        </div>
    </div>

    @if (Instrument != null)
    {
        int totalWidth = 1;
        for (int i = StartPosition; i <= EndPosition; i++)
        {
            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);
            totalWidth += positionViewModel?.Permutations.Count > 0 ? positionViewModel.Permutations.Count : 1;
        }

        <div class="d-flex justify-content-end my-3">
            <NoteMapToolbar Instrument="@Instrument" OnChange="OnZoomChange" />
        </div>

        <table class="w-100" cellpadding="0">
            <tbody class="fretboard">
                <tr class="fretboard__heading">
                    <th class="string__name" style="width: 0.001%;"></th>
                    @for (int i = StartPosition; i <= EndPosition; i++)
                    {
                        NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);
                        float width = positionViewModel?.Permutations.Count > 0 ? positionViewModel.Permutations.Count : 1;

                        <td class="string__fret"
                            style="width: @(width / totalWidth)%">
                            @i
                        </td>
                    }
                </tr>

                @for (int i = 0; i < Instrument.Strings.Count; i++)
                {
                    InstrumentString @string = Instrument.Strings.ElementAt(i);
                    <tr class="fretboard__string">
                        <th class="string__name">
                            @(@string.OpenNote.Name)
                        </th>

                        @for (int j = StartPosition; j <= EndPosition; j++)
                        {
                            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(j);
                            NoteMapNotesViewModel? selectedPermutation = positionViewModel?.SelectedPermutation;
                            InstrumentStringNote? note = selectedPermutation?.Notes.ElementAt(i);

                            <td class="string__fret">
                                <div class="inner @(note != null ? "enabled" : "disabled")">
                                    @if (note != null)
                                    {
                                        <div class="d-flex align-items-center">
                                            <span class="me-auto">@note.Note.Name</span>

                                            @if (note.Modifier != null)
                                            {
                                                <span class="badge bg-light text-dark">@note.Modifier.Name</span>
                                            }
                                        </div>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>

            <tbody class="separator">
                <tr>
                    <td>&nbsp;</td>
                </tr>
            </tbody>

            <tbody class="modifiers">
                <tr>
                    <th></th>

                    @for (int i = StartPosition; i <= EndPosition; i++)
                    {
                        NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);

                        <td class="modifier__fret">
                            @if (positionViewModel != null && positionViewModel.Permutations.Count > 0)
                            {
                                <div class="modifier__permutations">
                                    @for (int p = 0; p < positionViewModel.Permutations.Count; p++)
                                    {
                                        NoteMapNotesViewModel permutation = positionViewModel.Permutations.ElementAt(p);
                                        bool selected = positionViewModel.SelectedPermutation == permutation;
                                        string[] cssClasses = new[]
                                        {
                                            selected ? "active" : ""
                                        };

                                        <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                             @onclick="e => positionViewModel.SetSelectedPermutation(permutation)"
                                             data-hover="modifier-f-@i-p-@p">
                                            @if (selected)
                                            {
                                                @:*
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                @:&nbsp;
                            }
                        </td>
                    }
                </tr>
                @foreach (InstrumentStringModifier modifier in Instrument.Modifiers)
                {
                    <tr class="modifiers__modifier">
                        <th class="modifier__name">
                            @modifier.Name
                        </th>

                        @for (int i = StartPosition; i <= EndPosition; i++)
                        {
                            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);

                            bool available = positionViewModel != null &&
                            positionViewModel.AvailableModifiers.Contains(modifier.Name);

                            <td class="modifier__fret">
                                <div class="inner @(available ? "enabled" : "unavailable")">
                                    @if (positionViewModel != null && positionViewModel.Permutations.Count > 0)
                                    {
                                        <div class="modifier__permutations">
                                            @for (int p = 0; p < positionViewModel.Permutations.Count; p++)
                                            {
                                                NoteMapNotesViewModel permutation = positionViewModel.Permutations.ElementAt(p);
                                                bool enabled = permutation.HasModifier(modifier.Name);
                                                bool selected = positionViewModel.SelectedPermutation == permutation;
                                                string[] cssClasses = new[]
                                                {
                                                    enabled ? "enabled" : "disabled",
                                                    selected ? "active" : ""
                                                };

                                                <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                                     @onclick="e => positionViewModel.SetSelectedPermutation(permutation)"
                                                     data-hover="modifier-f-@i-p-@p">
                                                    &nbsp;
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>                                
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>        
    }
}

@inject IInstrumentFactory InstrumentFactory;
@inject IMusicTheoryService MusicTheoryService;
@inject NavigationManager NavigationManager;
@inject INoteMapViewModelService NoteMapViewModelService;
@inject IUserInstrumentService UserInstrumentService
@code {
    NoteMapCriteriaViewModel? Criteria { get; set; }
    NoteMapCriteriaOptionsViewModel? CriteriaOptions { get; set; }    
    int EndPosition { get; set; }
    StringedInstrumentBase? Instrument { get; set; }
    int StartPosition { get; set; }
    Guid UserId { get; set; }
    NoteMapViewModel? ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Guid? userId = await GetCurrentUserIdAsync();
        if (userId == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        UserId = userId.Value;
        CriteriaOptions = await NoteMapViewModelService.GetNoteMapCriteriaViewModelAsync(UserId);

        SetCriteriaFromQueryString();

        await LoadInstrumentAsync();
        SetPermutations();
    }

    async Task LoadInstrumentAsync()
    {
        if (Criteria == null || string.IsNullOrEmpty(Criteria.InstrumentId))
        {
            Instrument = null;
        }
        else if (Criteria.InstrumentId != Instrument?.Id)
        {
            InstrumentBase? instrument = await UserInstrumentService.FindAsync(UserId, Criteria.InstrumentId);
            Instrument = instrument as StringedInstrumentBase;
        }
    }

    async Task OnCriteriaChange(NoteMapCriteriaViewModel criteria)
    {
        Criteria = criteria;

        await LoadInstrumentAsync();
        SetPermutations();

        NavigationManager.SetQueryStringValues(new Dictionary<string, string?>
        {
            { "instrument", Criteria.InstrumentId },
            { "key", Criteria.KeyName + Criteria.KeyType }
        });        
    }

    void OnZoomChange(NoteMapZoomViewModel? zoom)
    {
        EndPosition = zoom != null ? zoom.EndPosition : 0;
        StartPosition = zoom != null ? zoom.StartPosition : 0;                
    }

    void SetCriteriaFromQueryString()
    {
        NavigationManager.TryGetQueryStringValue("instrument", out string instrument);
        NavigationManager.TryGetQueryStringValue("key", out string key);
        
        Scale.TryParse(key, out Scale? keyScale);

        Criteria = new NoteMapCriteriaViewModel
        {
            InstrumentId = instrument,
            KeyName = keyScale?.ElementAt(0).Name,
            KeyType = keyScale?.Type.ShortName(),
            Type = NoteMapType.Chord
        };
    }

    void SetPermutations()
    {
        if (Instrument == null || string.IsNullOrEmpty(Criteria?.KeyName))
        {
            ViewModel = null;
            StateHasChanged();
            return;
        }
        
        string key = (Criteria.KeyName + Criteria.KeyType).Trim();
        ViewModel = NoteMapViewModelService.GetNoteMapPermutationsViewModel(Instrument,
            key, Criteria.Type);
        StateHasChanged();
    }
}