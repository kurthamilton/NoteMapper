@page "/"

<PageTitle>Note Mapper</PageTitle>

@using System.Linq;
@using NoteMapper.Core
@using NoteMapper.Core.Instruments
@using NoteMapper.Services
@using NoteMapper.Services.Web
@using NoteMapper.Services.Web.ViewModels
@using NoteMapper.Services.Web.ViewModels.Instruments
@using NoteMapper.Services.Web.ViewModels.NoteMap
@using NoteMapper.Web.Blazor.Components.NoteMap
@inject IInstrumentFactory InstrumentFactory;
@inject IMusicTheoryService MusicTheoryService;
@inject INoteMapViewModelService NoteMapViewModelService;

@if (CriteriaOptions == null)
{
    <div>HELLO! 2</div>
    <p><em>Loading...</em></p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <Criteria Options="@CriteriaOptions" OnChange="OnCriteriaChange" />
        </div>
    </div>

    @if (Instrument != null)
    {
        int totalWidth = 1;
        for (int i = 0; i <= Instrument.Positions; i++)
        {
            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);
            totalWidth += positionViewModel?.Permutations.Count > 0 ? positionViewModel.Permutations.Count : 1;
        }

        <table class="w-100" cellpadding="0">
            <tbody class="fretboard">
                <tr class="fretboard__heading">
                    <th class="string__name" style="width: @(1.0 / totalWidth)%;"></th>
                    @for (int i = 0; i <= Instrument.Positions; i++)
                    {
                        NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);
                        float width = positionViewModel?.Permutations.Count > 0 ? positionViewModel.Permutations.Count : 1;

                        <td class="string__fret @(positionViewModel?.Permutations.Count > 0 ? "" : "unused")"
                            style="width: @(width / totalWidth)%">
                            @i
                        </td>
                    }
                </tr>

                @for (int i = 0; i < Instrument.Strings.Count; i++)
                {
                    InstrumentString @string = Instrument.Strings.ElementAt(i);
                    <tr class="fretboard__string">
                        <th class="string__name">
                            @(@string.OpenNote.Name)
                        </th>

                        @for (int j = 0; j <= Instrument.Positions; j++)
                        {
                            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(j);
                            NoteMapNotesViewModel? selectedPermutation = positionViewModel?.SelectedPermutation;
                            InstrumentStringNote? note = selectedPermutation?.Notes.ElementAt(i);

                            <td class="string__fret @(note != null ? "enabled" : "disabled")">
                                @if (note != null)
                                {
                                    <div class="d-flex align-items-center">
                                        <span class="me-auto">@note.Note.Name</span>

                                        @if (note.Modifier != null)
                                        {
                                            <span class="badge bg-light text-dark">@note.Modifier.Name</span>
                                        }
                                    </div>
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>

            <tbody class="separator">
                <tr>
                    <td>&nbsp;</td>
                </tr>
            </tbody>

            <tbody class="modifiers">
                <tr>
                    <th></th>

                    @for (int i = 0; i <= Instrument.Positions; i++)
                    {
                        NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);

                        <td class="modifier__fret">
                            @if (positionViewModel != null)
                            {
                                <div class="modifier__permutations">
                                    @for (int p = 0; p < positionViewModel.Permutations.Count; p++)
                                    {
                                        NoteMapNotesViewModel permutation = positionViewModel.Permutations.ElementAt(p);
                                        bool selected = positionViewModel.SelectedPermutation == permutation;
                                        string[] cssClasses = new[]
                                        {
                                            selected ? "active" : ""
                                        };

                                        <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                             data-hover="modifier-f-@i-p-@p">
                                            @if (selected)
                                            {
                                                @:*
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </td>
                    }
                </tr>
                @foreach (InstrumentStringModifier modifier in Instrument.Modifiers)
                {
                    <tr class="modifiers__modifier">
                        <th class="modifier__name">
                            @modifier.Name
                        </th>

                        @for (int i = 0; i <= Instrument.Positions; i++)
                        {
                            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);

                            bool available = positionViewModel != null &&
                            positionViewModel.AvailableModifiers.Contains(modifier.Name);

                            <td class="modifier__fret @(available ? "enabled" : "unavailable")">
                                @if (positionViewModel != null && positionViewModel.Permutations.Count > 0)
                                {
                                    <div class="modifier__permutations">
                                        @for (int p = 0; p < positionViewModel.Permutations.Count; p++)
                                        {
                                            NoteMapNotesViewModel permutation = positionViewModel.Permutations.ElementAt(p);
                                            bool enabled = permutation.HasModifier(modifier.Name);
                                            bool selected = positionViewModel.SelectedPermutation == permutation;
                                            string[] cssClasses = new[]
                                            {
                                                enabled ? "enabled" : "disabled",
                                                selected ? "active" : ""
                                            };

                                            <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                                 @onclick="e => positionViewModel.SetSelectedPermutation(permutation)"
                                                 data-hover="modifier-f-@i-p-@p">
                                                &nbsp;
                                            </div>
                                        }
                                    </div>
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }    
}

@code {
    NoteMapCriteriaViewModel? Criteria;
    NoteMapCriteriaOptionsViewModel? CriteriaOptions;
    StringedInstrumentBase? Instrument;
    NoteMapViewModel? ViewModel;

    protected override void OnInitialized()
    {
        CriteriaOptions = NoteMapViewModelService.GetNoteMapCriteriaViewModel();
    }

    void OnCriteriaChange(NoteMapCriteriaViewModel criteria)
    {
        Criteria = criteria;

        if (Criteria.Instrument != Instrument?.Name)
        {
            Instrument = InstrumentFactory.GetInstrument(Criteria.Instrument) as StringedInstrumentBase;
        }

        SetPermutations();
    }

    void SetPermutations()
    {
        if (Instrument == null || string.IsNullOrEmpty(Criteria?.KeyName))
        {
            ViewModel = null;
            StateHasChanged();
            return;
        }

        string key = (Criteria.KeyName + Criteria.KeyType).Trim();
        ViewModel = NoteMapViewModelService.GetNoteMapPermutationsViewModel(Instrument,
            key, Criteria.Type);
        StateHasChanged();
    }
}