@page "/note-map"

<PageTitle>Note Map</PageTitle>

@using NoteMapper.Core
@using NoteMapper.Core.Instruments
@using NoteMapper.Services
@using NoteMapper.Services.Web
@using NoteMapper.Services.Web.ViewModels
@using NoteMapper.Web.Blazor.Data
@inject IInstrumentFactory InstrumentFactory;
@inject IMusicTheoryService MusicTheoryService;
@inject INoteMapViewModelService NoteMapViewModelService;

<h1>Note Map</h1>

@if (Model == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <div class="card mb-3">
        <div class="card-body form-inline">
            <div class=form-group>
                <label for="instrument">Instrument</label>
                <select class="form-control" id="instrument"
                    @onchange="OnInstrumentChange">
                    <option></option>
                    @foreach (string instrument in Model.Instruments)
                    {
                        <option>@instrument</option>
                    }
                </select>
            </div>

            <div class=form-group>
                <label for="key">Key</label>
                <select class="form-control" id="key" @onchange="OnKeyChange">
                    <option></option>
                    @foreach (KeyListItemViewModel key in Model.Keys)
                    {
                        <option value="@key.ShortName">@key.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="type">Type</label>
                <select class="form-control" id="type" @onchange="OnTypeChange">
                    @foreach (NoteMapType type in Model.Types)
                    {
                        <option>@type.ToString()</option>
                    }                    
                </select>
            </div>
        </div>
    </div>     

    @if (Instrument != null)    
    {
        <table class="table-fixed">
            <tbody class="fretboard">
                <tr class="fretboard__heading">
                    <th class="string__name"></th>
                    @for (int i = 0; i <= positions; i++)
                    {
                        <td class="string__fret">@i</td>
                    }
                </tr>

                @foreach (InstrumentString @string in Instrument.Strings)
                {
                    <tr class="fretboard__string">
                        <th class="string__name">
                            @(@string.OpenNote.Name)
                        </th>

                        @for (int i = 0; i <= positions; i++)
                        {
                            <td class="string__fret">
                            </td>
                        }
                    </tr>
                }
            </tbody>

            <tbody class="separator">
                <tr>
                    <td></td>
                </tr>
            </tbody>

            <tbody class="modifiers">
                @foreach (InstrumentStringModifier modifier in Instrument.Modifiers)
                {
                    <tr class="modifiers__modifier">
                        <th class="modifier__name">
                            @modifier.Name
                        </th>

                        @for (int i = 0; i <= positions; i++)
                        {
                            bool available = positionModifiers.Length > i && 
                                             positionModifiers[i].Contains(modifier.Name);

                            <td class="modifier__fret @(!available ? "disabled" : "")">

                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

    }    
}

@code {
    NoteMapCriteriaViewModel? Model;
    StringedInstrumentBase? Instrument;
    NoteMapPermutationsViewModel? Permutations;
    private int? positions;
    private string? selectedKey;
    private NoteMapType selectedType = NoteMapType.Chord;
    string[][] positionModifiers = new string[0][];
    int[][] positionStrings = new int[0][];

    protected override void OnInitialized()
    {
        Model = NoteMapViewModelService.GetNoteMapCriteriaViewModel();
    }

    void OnInstrumentChange(ChangeEventArgs e)
    {
        Instrument = InstrumentFactory.GetInstrument((string?)e.Value) as StringedInstrumentBase;
        positions = Instrument?.Strings.Max(x => x.Positions);
        SetPermutations();
    }

    void OnKeyChange(ChangeEventArgs e)
    {        
        selectedKey = (string?)e.Value;
        SetPermutations();
    }

    void OnTypeChange(ChangeEventArgs e)
    {
        string value = (string?)e.Value ?? "";
        NoteMapType type = (NoteMapType)Enum.Parse(typeof(NoteMapType), value, true);
        selectedType = type;
        SetPermutations();
    }

    void SetPermutations()
    {
        positionModifiers = new string[0][];
        if (Instrument == null || selectedKey == null)
        {
            return;
        }

        // Permutations = NoteMapViewModelService.GetNoteMapPermutationsViewModel(Instrument, selectedKey ?? "", selectedType);
        positionModifiers = new string[positions + 1 ?? 0][];        

        INoteCollection notes = Note.GetNotes(selectedType, selectedKey ?? "");

        for (int position = 0; position <= positions; position++)
        {
            IReadOnlyCollection<InstrumentStringModifier> availableModifiers = Instrument
                .AvailableModifiers(notes, position)
                .ToArray();
            positionModifiers[position] = availableModifiers
                .Select(x => x.Name)
                .ToArray();


            IReadOnlyCollection<IReadOnlyCollection<InstrumentStringNote>> permutations = Instrument.GetPermutations(selectedKey ?? "", position, selectedType);
        }
    }
}