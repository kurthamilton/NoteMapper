@page "/note-map"

<PageTitle>Note Map</PageTitle>

@using NoteMapper.Core
@using NoteMapper.Core.Instruments
@using NoteMapper.Services
@using NoteMapper.Services.Web
@using NoteMapper.Services.Web.ViewModels
@using NoteMapper.Services.Web.ViewModels.Instruments
@using NoteMapper.Services.Web.ViewModels.NoteMap
@using NoteMapper.Web.Blazor.Data
@inject IInstrumentFactory InstrumentFactory;
@inject IMusicTheoryService MusicTheoryService;
@inject INoteMapViewModelService NoteMapViewModelService;

<h1>Note Map</h1>

@if (Criteria == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    @*Criteria form*@
    <div class="card mb-3">
        <div class="card-body form-inline">
            <div class=form-group>
                <label for="instrument">Instrument</label>
                <select class="form-control" id="instrument"
                    @onchange="OnInstrumentChange">
                    <option></option>
                    @foreach (string instrument in Criteria.Instruments)
                    {
                        <option>@instrument</option>
                    }
                </select>
            </div>

            <div class=form-group>
                <label for="key">Key</label>
                <div class="d-flex">
                    <select class="form-control" id="key" @onchange="OnKeyNameChange">
                        <option></option>
                        @foreach (string name in Criteria.KeyNames)
                        {
                            <option>@name</option>
                        }
                    </select>
                    <select class="form-control" id="key" @onchange="OnKeyTypeChange">                       
                        @foreach (string type in Criteria.KeyTypes)
                        {
                            <option>@type</option>
                        }
                    </select>
                </div>                
            </div>

            <div class="form-group">
                <label for="type">Type</label>
                <select class="form-control" id="type" @onchange="OnTypeChange">
                    @foreach (NoteMapType type in Criteria.Types)
                    {
                        <option>@type.ToString()</option>
                    }                    
                </select>
            </div>
        </div>
    </div>     

    @if (Instrument != null)    
    {
        <table class="table-fixed" cellpadding="0">
            <tbody class="fretboard">
                <tr class="fretboard__heading">
                    <th class="string__name" style="width: 5%;"></th>
                    @for (int i = 0; i <= positions; i++)
                    {
                        NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);

                        <td class="string__fret @(positionViewModel?.Permutations.Count > 0 ? "" : "unused")">@i</td>
                    }
                </tr>

                @for(int i = 0; i < Instrument.Strings.Count; i++)
                {
                    InstrumentString @string = Instrument.Strings.ElementAt(i);
                    <tr class="fretboard__string">
                        <th class="string__name">
                            @(@string.OpenNote.Name)
                        </th>

                        @for (int j = 0; j <= positions; j++)
                        {
                            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(j);
                            NoteMapNotesViewModel? selectedPermutation = positionViewModel?.SelectedPermutation;
                            InstrumentStringNote? note = selectedPermutation?.Notes.ElementAt(i);

                            <td class="string__fret @(note != null ? "enabled" : "disabled")">                                
                                @if (note != null)
                                {
                                    <div class="d-flex align-items-center">
                                        <span class="me-auto">@note.Note.Name</span>

                                        @if (note.Modifier != null)
                                        {
                                            <span class="badge bg-light text-dark">@note.Modifier.Name</span>
                                        }
                                    </div>
                                }                                
                            </td>
                        }
                    </tr>
               }                
            </tbody>

            <tbody class="separator">
                <tr>
                    <td>&nbsp;</td>
                </tr>
            </tbody>

            <tbody class="modifiers">
                <tr>
                    <th></th>

                    @for (int i = 0; i <= positions; i++)
                    {
                        NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);
                        
                        <td class="modifier__fret">
                            @if (positionViewModel != null)
                            {
                                <div class="modifier__permutations">
                                    @for (int p = 0; p < positionViewModel.Permutations.Count; p++)
                                    {
                                        NoteMapNotesViewModel permutation = positionViewModel.Permutations.ElementAt(p);
                                        bool selected = positionViewModel.SelectedPermutation == permutation;
                                        string[] cssClasses = new[]
                                        {
                                            selected ? "active" : ""
                                        };

                                        <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                                data-hover="modifier-f-@i-p-@p">
                                            @if (selected)
                                            {
                                                @:*
                                            }
                                        </div>
                                    }
                                </div>                                    
                            }   
                        </td>
                    }
                </tr>
                @foreach (InstrumentStringModifier modifier in Instrument.Modifiers)
                {                    
                    <tr class="modifiers__modifier">
                        <th class="modifier__name">
                            @modifier.Name
                        </th>

                        @for (int i = 0; i <= positions; i++)
                        {
                            NoteMapPositionViewModel? positionViewModel = ViewModel?.Positions.ElementAt(i);
                            
                            bool available = positionViewModel != null && 
                                             positionViewModel.AvailableModifiers.Contains(modifier.Name);

                            <td class="modifier__fret @(available ? "enabled" : "unavailable")">
                                @if (positionViewModel != null && positionViewModel.Permutations.Count > 0)
                                {
                                    <div class="modifier__permutations">
                                        @for (int p = 0; p < positionViewModel.Permutations.Count; p++)
                                        {
                                            NoteMapNotesViewModel permutation = positionViewModel.Permutations.ElementAt(p);
                                            bool enabled = permutation.HasModifier(modifier.Name);
                                            bool selected = positionViewModel.SelectedPermutation == permutation;
                                            string[] cssClasses = new[]
                                            {
                                                enabled ? "enabled" : "disabled",
                                                selected ? "active" : ""
                                            };

                                            <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                                 @onclick="e => positionViewModel.SetSelectedPermutation(permutation)"
                                                 data-hover="modifier-f-@i-p-@p">
                                                &nbsp;
                                            </div>
                                        }
                                    </div>                                    
                                }                                
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }    
}

@code {
    NoteMapCriteriaViewModel? Criteria;
    StringedInstrumentBase? Instrument;
    NoteMapViewModel? ViewModel;
    private int? maximumStringDistance;
    private int? positions;
    private string? selectedKeyName;
    private string selectedKeyType = "Major";
    private NoteMapType selectedType = NoteMapType.Chord;    

    protected override void OnInitialized()
    {
        Criteria = NoteMapViewModelService.GetNoteMapCriteriaViewModel();
    }

    void OnInstrumentChange(ChangeEventArgs e)
    {
        Instrument = InstrumentFactory.GetInstrument((string?)e.Value) as StringedInstrumentBase;
        positions = Instrument?.Strings.Max(x => x.Positions);
        SetPermutations();
    }

    void OnKeyNameChange(ChangeEventArgs e)
    {        
        selectedKeyName = (string?)e.Value;
        SetPermutations();
    }

    void OnKeyTypeChange(ChangeEventArgs e)
    {
        selectedKeyType = (string?)e.Value ?? "";
        SetPermutations();
    }

    void OnTypeChange(ChangeEventArgs e)
    {
        string value = (string?)e.Value ?? "";
        NoteMapType type = (NoteMapType)Enum.Parse(typeof(NoteMapType), value, true);
        selectedType = type;
        SetPermutations();
    }

    void SetPermutations()
    {
        if (Instrument == null || string.IsNullOrEmpty(selectedKeyName))
        {
            return;
        }

        string key = (selectedKeyName + selectedKeyType).Trim();
        ViewModel = NoteMapViewModelService.GetNoteMapPermutationsViewModel(Instrument,
            key, selectedType);
    }
}