@page "/"
@inherits NoteMapperComponentBase

@using NoteMapper.Core.Guitars
@using NoteMapper.Core.NoteMap
@using NoteMapper.Services
@using NoteMapper.Services.Instruments
@using NoteMapper.Services.Web
@using NoteMapper.Services.Web.ViewModels.NoteMap
@using NoteMapper.Web.Blazor.Extensions
@using NoteMapper.Web.Blazor.Models.NoteMap
@using NoteMapper.Web.Blazor.Models.Tour;
@using NoteMapper.Web.Blazor.Shared.NoteMap
@using NoteMapper.Web.Blazor.Shared.Shared

@if (CriteriaOptions == null)
{
    <Loading />
    return;
}

<NoteMapHeader Criteria="@Criteria" CriteriaOptions="@CriteriaOptions"
               Instrument="@Instrument"
               OnCriteriaChange="OnCriteriaChange"
               OnZoomChange="OnZoomChange"/>

@if (Instrument != null)
{
    int totalWidth = 1;
    for (int i = StartFret; i <= EndFret; i++)
    {
        NoteMapFretViewModel? fretViewModel = ViewModel?.Frets.ElementAt(i);
        totalWidth += fretViewModel?.Permutations.Count > 0 ? fretViewModel.Permutations.Count : 1;
    }

    bool noteTourStepShown = false;
    bool activeCombinationStepShown = false;

    <div class="table-responsive">
        <table class="mt-3" cellpadding="0">                
            <tbody class="fretboard"
                    data-nm-tour-container="note-map-fretboard"
                    @attributes="FretboardTourStep">
                @** STRING HEADER ROW **@
                <tr class="fretboard__heading">
                    <th class="string__name" style="width: 0.001%;" colspan="2">
                        <div class="d-flex align-items-center justify-content-end">
                            <button class="btn btn-icon" data-nm-tour-for="note-map-fretboard" type="button">
                                <i class="icon bi bi-question-circle"></i>
                            </button>
                        </div>
                    </th>
                    @for (int i = StartFret; i <= EndFret; i++)
                    {
                        NoteMapFretViewModel? fretViewModel = ViewModel?.Frets.ElementAt(i);
                        float width = fretViewModel?.Permutations.Count > 0 ? fretViewModel.Permutations.Count : 1;

                        <td class="string__fret" style="width: @(width / totalWidth)%">
                            @i
                        </td>
                    }
                </tr>

                @for (int i = 0; i < Instrument.Strings.Count; i++)
                {                                                
                    @** STRING ROW **@

                    GuitarString @string = Instrument.Strings.ElementAt(i);
                    <tr class="fretboard__string">
                        <td class="string__name">
                            @(i + 1)
                        </td>
                        <th class="string__name">
                            @(@string.OpenNote.GetName(Criteria.Accidental))
                        </th>

                        @for (int j = StartFret; j <= EndFret; j++)
                        {
                            NoteMapFretViewModel? fretViewModel = ViewModel?.Frets.ElementAt(j);
                            NoteMapNotesViewModel? selectedPermutation = fretViewModel?.SelectedPermutation;
                            NoteMapNoteViewModel? note = selectedPermutation?.Notes.ElementAt(i);

                            TourStepAttributes? tourStep = null;
                            TourStepAttributes? noteStep = null;
                            TourStepAttributes? modifierStep = null;
                            if (!noteTourStepShown && 
                                note != null && 
                                !string.IsNullOrEmpty(note.Modifier))
                            {
                                tourStep = new TourStepAttributes(FretboardTourStep.Step + 1, FretboardTourStep.Title,
                                    "Available notes are highlighted", true);
                                noteStep = new TourStepAttributes(tourStep.Step + 1, FretboardTourStep.Title,
                                    "The note or interval is shown here", true);
                                modifierStep = new TourStepAttributes(noteStep.Step + 1, FretboardTourStep.Title,
                                    "The modifier (pedal or lever) is shown here", true);
                                noteTourStepShown = true;
                            }
                            
                            <td class="string__fret">
                                <div class="inner @(note != null ? "enabled" : "disabled")"
                                        @attributes="@tourStep">
                                    @if (note != null)
                                    {
                                        <div class="d-flex align-items-center">
                                            <span class="me-auto badge bg-light text-dark"
                                                @attributes="@noteStep">
                                                @if (Criteria?.ShowIntervals == true)
                                                {
                                                    @note.Interval
                                                }
                                                else
                                                {
                                                    @note.Note
                                                }
                                            </span>
                                            &nbsp;@*Force the table cell contents to filll the table cell*@
                                            @if (note.Modifier != null)
                                            {
                                                <span class="badge bg-dark text-light" @attributes="@modifierStep">
                                                    @note.Modifier
                                                </span>
                                            }
                                        </div>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>

            @** SEPARATOR **@

            <tbody class="separator">
                <tr>
                    <td colspan="@((EndFret - StartFret) + 3)">
                        &nbsp;
                    </td>
                </tr>
            </tbody>

            @if (Criteria?.Mode == NoteMapMode.Permutations)                
            {
                <tbody class="modifiers"                        
                        data-nm-tour-container="note-map-modifiers"
                        @attributes="ModifiersTourStep">
                    @** MODIFIER HEADER ROW **@

                    <tr>
                        <th class="modifier__name" colspan="2">
                            <div class="d-flex align-items-center justify-content-end">
                                <button class="btn btn-icon" data-nm-tour-for="note-map-modifiers" type="button">
                                    <i class="icon bi bi-question-circle"></i>
                                </button>
                            </div>
                        </th>

                        @for (int i = StartFret; i <= EndFret; i++)
                        {
                            NoteMapFretViewModel? fretViewModel = ViewModel?.Frets.ElementAt(i);                            

                            <td class="modifier__fret">
                                @if (fretViewModel != null && fretViewModel.Permutations.Count > 0)
                                {
                                    <div class="modifier__permutations">
                                        @for (int p = 0; p < fretViewModel.Permutations.Count; p++)
                                        {
                                            NoteMapNotesViewModel permutation = fretViewModel.Permutations.ElementAt(p);
                                            bool selected = fretViewModel.SelectedPermutation == permutation;
                                            string[] cssClasses = new[]
                                            {
                                                selected ? "active" : ""
                                            };

                                            TourStepAttributes? activeCombinationStep = null;
                                            if (!activeCombinationStepShown && 
                                                selected)
                                            {
                                                activeCombinationStep = new TourStepAttributes(ModifiersTourStep.Step + 1,
                                                    ModifiersTourStep.Title, "The active combination is indicated here", true);
                                                activeCombinationStepShown = true;
                                            }

                                            <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                                    @onclick="e => fretViewModel.SetSelectedPermutation(permutation)"
                                                    data-hover="modifier-f-@i-p-@p"
                                                    @attributes="@activeCombinationStep">
                                                @if (selected)
                                                {
                                                    @:*
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    @:&nbsp;
                                }
                            </td>
                        }
                    </tr>
                    @foreach (GuitarStringModifier modifier in Instrument.Modifiers)
                    {
                        @** MODIFIER ROW **@

                        <tr class="modifiers__modifier">
                            <th class="modifier__name" colspan="2">
                                @modifier.Name
                            </th>                            

                            @for (int i = StartFret; i <= EndFret; i++)
                            {
                                NoteMapFretViewModel? fretViewModel = ViewModel?.Frets.ElementAt(i);

                                bool available = fretViewModel != null &&
                                fretViewModel.AvailableModifiers.Contains(modifier.Name);

                                <td class="modifier__fret">
                                    <div class="inner @(available ? "enabled" : "unavailable")">
                                        @if (fretViewModel != null && fretViewModel.Permutations.Count > 0)
                                        {
                                            <div class="modifier__permutations">
                                                @for (int p = 0; p < fretViewModel.Permutations.Count; p++)
                                                {
                                                    NoteMapNotesViewModel permutation = fretViewModel.Permutations.ElementAt(p);
                                                    bool enabled = permutation.HasModifier(modifier.Name);
                                                    bool selected = fretViewModel.SelectedPermutation == permutation;
                                                    string[] cssClasses = new[]
                                                    {
                                                        enabled ? "enabled" : "disabled",
                                                        selected ? "active" : ""
                                                    };

                                                    <div class="modifier__permutation @string.Join(" ", cssClasses) col"
                                                            @onclick="e => fretViewModel.SetSelectedPermutation(permutation)"
                                                            data-hover="modifier-f-@i-p-@p">
                                                        &nbsp;
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            }

        </table>
    </div>

    if (Criteria?.Mode == NoteMapMode.Manual)
    {
        <div class="d-flex">
            @foreach (IGrouping<string, GuitarStringModifier> group in Instrument.Modifiers.GroupBy(x => x.Type))
            {
                <div class="me-1">
                    <div>
                        @group.Key
                    </div>
                    <div class="btn-group">
                        @foreach (GuitarStringModifier modifier in group)
                        {
                            bool disabled = !modifier.CanBeUsedWith(SelectedModifiers);

                            string cssClass = disabled
                                ? "btn-outline-secondary"
                                : SelectedModifiers.Contains(modifier)
                                ? "btn-success"
                                : "btn-outline-success";

                            <button class="btn @cssClass"
                                    @onclick="e => ToggleSelectedModifier(modifier)"
                                    disabled="@disabled">
                                @modifier.Name
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
}

@inject IInstrumentFactory InstrumentFactory
@inject IMusicTheoryService MusicTheoryService
@inject NavigationManager NavigationManager
@inject INoteMapViewModelService NoteMapViewModelService
@inject IUserInstrumentService UserInstrumentService
@code {
    NoteMapCriteriaViewModel? Criteria { get; set; }
    NoteMapCriteriaOptionsViewModel? CriteriaOptions { get; set; }
    int EndFret { get; set; }
    TourStepAttributes FretboardTourStep = new(1, "Fretboard", 
        "This is the fretboard with fret numbers along the top and string notes on the left");
    GuitarBase? Instrument { get; set; }
    TourStepAttributes ModifiersTourStep = new(1, "Modifiers",
        @"<p>Available combinations of modifiers (pedals and levers) are shown here for each fret.</p>
        <p>Click on a combination to activate it and show the available notes on the fretboard.</p>");
    List<GuitarStringModifier> SelectedModifiers { get; } = new();
    int StartFret { get; set; }
    Guid? UserId { get; set; }
    NoteMapViewModel? ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserId = await GetCurrentUserIdAsync();

        CriteriaOptions = await NoteMapViewModelService.GetNoteMapCriteriaOptionsViewModelAsync(UserId);

        SetCriteriaFromQueryString();

        await LoadInstrumentAsync();
        SetPermutations();
    }

    async Task LoadInstrumentAsync()
    {
        if (Criteria == null || string.IsNullOrEmpty(Criteria.InstrumentId))
        {
            Instrument = null;
        }
        else if (Criteria.InstrumentId != Instrument?.Id)
        {
            Instrument = await UserInstrumentService.FindAsync(UserId, Criteria.InstrumentId);
            SelectedModifiers.Clear();
        }
    }

    async Task OnCriteriaChange(NoteMapCriteriaViewModel criteria)
    {
        Criteria = criteria;

        await LoadInstrumentAsync();
        SetPermutations();

        NavigationManager.SetQueryStringValues(new Dictionary<string, string?>
        {
            { "instrument", Criteria.InstrumentId },
            { "intervals", Criteria.ShowIntervals ? "true" : null },
            { "key", Criteria.KeyName + Criteria.ScaleType },
            { "mode", Criteria.Mode != NoteMapCriteriaViewModel.DefaultMode ? Criteria.Mode.ToString() : null },
            { "accidental", Criteria.Accidental != NoteMapCriteriaViewModel.DefaultAccidental ? Criteria.Accidental.ToString() : null }
        });
    }

    void OnZoomChange(NoteMapZoomViewModel? zoom)
    {
        EndFret = zoom != null ? zoom.EndFret : 0;
        StartFret = zoom != null ? zoom.StartFret : 0;
    }

    void SetCriteriaFromQueryString()
    {
        NavigationManager.TryGetQueryStringValue("instrument", out string instrument);
        NavigationManager.TryGetQueryStringValue("intervals", out string intervals);
        NavigationManager.TryGetQueryStringValue("key", out string key);
        NavigationManager.TryGetQueryStringValue("mode", out string mode);
        NavigationManager.TryGetQueryStringValue("accidental", out string accidental);

        Criteria = NoteMapViewModelService.GetNoteMapCriteriaViewModel(CriteriaOptions,
            instrument, key, mode, intervals, accidental);
    }

    void SetPermutations()
    {
        if (Instrument == null || string.IsNullOrEmpty(Criteria?.KeyName))
        {
            ViewModel = null;
            StateHasChanged();
            return;
        }

        string key = (Criteria.KeyName + Criteria.ScaleType).Trim();
        NoteMapOptionsViewModel options = new()
        {
            Accidental = Criteria.Accidental,
            Key = key,
            Mode = Criteria.Mode,
            Modifiers = SelectedModifiers.Select(x => x.Name).ToArray(),
            Type = Criteria.Type
        };

        ViewModel = NoteMapViewModelService.GetNoteMapPermutationsViewModel(Instrument, options);
        StateHasChanged();
    }

    void ToggleSelectedModifier(GuitarStringModifier modifier)
    {
        if (SelectedModifiers.Contains(modifier))
        {
            SelectedModifiers.Remove(modifier);
        }
        else
        {
            SelectedModifiers.Add(modifier);
        }

        SetPermutations();
    }
}