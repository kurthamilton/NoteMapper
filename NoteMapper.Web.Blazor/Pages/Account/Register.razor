@page "/account/register"
@inherits NoteMapperComponentBase
@attribute [AllowAnonymous]

@using NoteMapper.Core
@using NoteMapper.Core.Users
@using NoteMapper.Services.Users
@using NoteMapper.Web.Blazor.Models
@using NoteMapper.Web.Blazor.Models.Account
@using NoteMapper.Web.Blazor.Shared.Components
@using NoteMapper.Web.Blazor.Shared.Layouts

<ContentPage>
    <h1>Register</h1>

    @if (Model == null)
    {
        <Loading />
        return;
    }

    <Feedback Model="@Feedback" />

    @if (Model.RegistrationType == RegistrationType.Closed)
    {
        <div class="alert alert-danger">
            Registration is currently closed
        </div>
        return;
    }

    @if (Feedback == null || Feedback.Type != FeedbackType.Success)
    {
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmitAsync">
            <DataAnnotationsValidator />

            <fieldset disabled="@Loading">
                @if (Model.RegistrationType == RegistrationType.InviteOnly)
                {
                    <div class="alert alert-warning">
                        Registration is currently invite only
                    </div>

                    <div class="mb-3">                
                        <label for="code" class="form-label required">Invite code</label>
                        <InputText id="code" @bind-Value="Model.Code" class="form-control" />
                        <ValidationMessage For="() => Model.Code" />
                    </div>
                }        
        
                <div class="mb-3">
                    <label for="email" class="form-label required">Email</label>
                    <InputText id="email" @bind-Value="Model.Email" class="form-control" />
                    <ValidationMessage For="() => Model.Email" />
                </div>

                @if (Model.ShowPassword)
                {
                    <div class="mb-3">
                        <label for="password" class="form-label required">Password</label>
                        <InputText id="password" type="password" @bind-Value="Model.Password" class="form-control" />
                        <ValidationMessage For="() => Model.Password" />
                    </div>
                }
                else
                {
                    <input id="password" type="hidden" value="notused" />
                }

                <div>
                    <button type="submit" class="btn btn-primary">
                        @if (Model.ShowPassword)
                        {
                            @:Register
                        }
                        else
                        {
                            @:Send activation link
                        }
                        
                        @if (Loading)
                        {
                            <ButtonSpinner />
                        }
                    </button>            
                </div>
            </fieldset>
        </EditForm>
    }
    else
    {
        <button class="btn btn-outline-secondary" @onclick="() => Feedback = null">Back</button>
    }
</ContentPage>

@code {
    bool Loading { get; set; }

    RegisterViewModel? Model { get; set; }

    protected override void OnInitialized()
    {
        RegistrationDetails details = IdentityService.GetRegistrationDetails();
        Model = new RegisterViewModel
        {
            RegistrationType = details.RegistrationType,
            ShowPassword = details.ShowPassword
        };
    }

    private async Task HandleValidSubmitAsync()
    {
        if (Model == null)
        {
            return;
        }

        Loading = true;
        await InvokeAsync(StateHasChanged);

        ServiceResult result = await IdentityService.RegisterUserAsync(Model.Email, Model.Code, Model.Password);
        Feedback = FeedbackViewModel.FromServiceResult(result);

        Loading = false;
        await InvokeAsync(StateHasChanged);
    }
}
