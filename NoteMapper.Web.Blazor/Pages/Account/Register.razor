@page "/account/register"
@layout ContentLayout
@attribute [AllowAnonymous]
@using NoteMapper.Core
@using NoteMapper.Core.Users;
@using NoteMapper.Services.Users
@using NoteMapper.Web.Blazor.Models
@using NoteMapper.Web.Blazor.Models.Account
@using NoteMapper.Web.Blazor.Shared.Layouts
@using NoteMapper.Web.Blazor.Shared.Shared

<h1>Register</h1>

<Feedback Model="@Feedback" />

@if (Feedback == null || Feedback.Type != FeedbackType.Success)
{
    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmitAsync">
        <DataAnnotationsValidator />

        @if (RegistrationType == RegistrationType.InviteOnly)
        {
            <div class="alert alert-warning">
                Registration is currently invite only
            </div>

            <div class="mb-3">                
                <label for="code" class="form-label required">Invite code</label>
                <InputText id="code" @bind-Value="Model.Code" class="form-control" />
                <ValidationMessage For="() => Model.Code" />
            </div>
        }        

        <div class="mb-3">
            <label for="email" class="form-label required">Email</label>
            <InputText id="email" @bind-Value="Model.Email" class="form-control" />
            <ValidationMessage For="() => Model.Email" />
        </div>

        <div>
            <button type="submit" class="btn btn-primary">Send activation link</button>            
        </div>
    </EditForm>
}

@inject IIdentityService IdentityService
@code {
    FeedbackViewModel? Feedback { get; set; }

    RegisterViewModel Model { get; set; } = new();

    RegistrationType RegistrationType { get; set; }

    protected override void OnInitialized()
    {
        RegistrationType = IdentityService.GetRegistrationType();
        if (RegistrationType == RegistrationType.Closed)
        {
            Feedback = new FeedbackViewModel
            {
                Message = "Registration is currently closed",
                Type = FeedbackType.Danger
            };
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        ServiceResult result = await IdentityService.RegisterUserAsync(Model.Email, Model.Code);
        Feedback = FeedbackViewModel.FromServiceResult(result);
    }
}
