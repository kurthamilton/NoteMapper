@page "/account/login"
@layout AccountLayout
@attribute [AllowAnonymous]
@using NoteMapper.Core
@using NoteMapper.Data.Core.Users
@using NoteMapper.Services.Users
@using NoteMapper.Services.Web;
@using NoteMapper.Web.Blazor.Models
@using NoteMapper.Web.Blazor.Models.Account
@using NoteMapper.Web.Blazor.Shared.Layouts
@using NoteMapper.Web.Blazor.Shared.Shared

<h1>Login</h1>

<Feedback Model="@Feedback" />

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" @bind-Value="Model.Email" class="form-control" />
        <ValidationMessage For="() => Model.Email" />
    </div>

    <div class="mb-3">
        <div class="d-flex">
            <label for="password" class="form-label me-auto">Password</label>
            <a href="/account/password/forgotten">
                Forgotten password?
            </a>
        </div>
        <InputText id="password" type="password" @bind-Value="Model.Password" class="form-control" />
        <ValidationMessage For="() => Model.Password" />
    </div>

    <div>
        <button type="submit" class="btn btn-primary">Login</button>        
    </div>
</EditForm>

@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager
@inject IUrlEncoder UrlEncoder
@code {
    FeedbackViewModel? Feedback { get; set; }

    LoginViewModel Model { get; set; } = new();    

    private async Task HandleValidSubmitAsync()
    {
        User? user = await IdentityService.FindUserAsync(Model.Email);
        ServiceResult result = await IdentityService.CanUserSignIn(user, Model.Password);
        if (user == null || !result.Success)
        {
            Feedback = FeedbackViewModel.FromServiceResult(result);
            return;
        }

        UserLoginToken? token = await IdentityService.CreateLoginTokenAsync(user.UserId);
        if (token == null)
        {
            Feedback = new FeedbackViewModel
            {
                Message = "An error occurred during login",
                Type = FeedbackType.Danger
            };
            return;
        }

        string url = "/account/dologin?email={email}&token={token}"
            .Replace("{email}", UrlEncoder.UrlEncode(user.Email))
            .Replace("{token}", UrlEncoder.UrlEncode(token.Token));
        NavigationManager.NavigateTo(url, new NavigationOptions { ForceLoad = true });
    }
}
