@page "/adm/questionnaires/{id:guid}/edit"
@inherits NoteMapperAdminComponentBase
@attribute [Authorize]

@using NoteMapper.Core
@using NoteMapper.Services.Web.Questionnaires
@using NoteMapper.Services.Web.ViewModels.Questionnaires
@using NoteMapper.Web.Blazor.Shared.Admin.Questionnaires
@using NoteMapper.Web.Blazor.Shared.Components

@if (Model == null)
{
    <Loading />
    return;
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/adm">Admin</a>
        </li>
        <li class="breadcrumb-item">
            <a href="/adm/questionnaires">Questionnaires</a>
        </li>
        <li class="breadcrumb-item active">Edit</li>
    </ol>
</nav>

<EditForm Model="@Model" OnValidSubmit="HandleValidSubmitAsync">
    <ObjectGraphDataAnnotationsValidator />

    <QuestionnaireForm Model="@Model" />

    <div class="d-flex align-items-start">
        <button class="btn btn-primary">Save</button>
        @if (Feedback != null)
        {
            <div class="ms-3 flex-grow-1">
                <Feedback Class="alert-sm" Model="Feedback" />
            </div>
        }        
    </div>
        
</EditForm>

@inject IQuestionnaireViewModelService QuestionnaireViewModelService
@code {
    [Parameter]
    public Guid Id { get; set; }

    EditQuestionnaireViewModel? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model = await QuestionnaireViewModelService.GetEditQuestionnaireViewModel(Id);
        if (Model == null)
        {
            NavigationManager.NavigateTo("/adm/questionnaires");
            return;
        }
    }

    async Task HandleValidSubmitAsync()
    {
        if (Model == null)
        {
            return;
        }

        ServiceResult result = await QuestionnaireViewModelService.UpdateQuestionnaireAsync(Id, Model);
        SetFeedback(result);
    }
}
