@page "/adm/questionnaires"
@inherits NoteMapperAdminComponentBase
@attribute [Authorize]

@using NoteMapper.Core
@using NoteMapper.Services.Questionnaires
@using NoteMapper.Services.Web.Questionnaires;
@using NoteMapper.Services.Web.ViewModels.Questionnaires;
@using NoteMapper.Web.Blazor.Shared.Components
@using QuestionnaireModel = NoteMapper.Data.Core.Questionnaires.Questionnaire

@if (Questionnaires == null)
{
    <Loading />
    return;
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/adm">Admin</a>
        </li>
        <li class="breadcrumb-item active">Questionnaires</li>
    </ol>
</nav>

<Feedback Model="@Feedback" />

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Active</th>
            <th>Expires</th>
            <th>Respondents</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (ListQuestionnaireViewModel questionnaire in Questionnaires)
        {
            <tr>
                <td>
                    <a href="/adm/questionnaires/@questionnaire.Id/edit">@questionnaire.Name</a>
                </td>
                <td>@questionnaire.Active</td>
                <td>@questionnaire.ExpiresUtc?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@questionnaire.Respondents</td>
                <td>
                    @if (questionnaire.Respondents == 0)
                    {
                        <button type="button" class="btn btn-outline-danger btn-sm"
                            @onclick="(() => DeleteQuestionnaireAsync(questionnaire.Id))">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    }                    
                </td>
            </tr>
        }
    </tbody>
</table>

<a class="btn btn-outline-primary btn-sm" href="/adm/questionnaires/create">
    <i class="bi bi-plus-circle"></i>
    Create new questionnaire
</a>

@inject IQuestionnaireService QuestionnaireService
@inject IQuestionnaireViewModelService QuestionnaireViewModelService
@code {
    IReadOnlyCollection<ListQuestionnaireViewModel>? Questionnaires { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Questionnaires = await QuestionnaireViewModelService.GetQuestionnairesAsync();
    }

    async Task DeleteQuestionnaireAsync(Guid questionnaireId)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this questionnaire?"))
        {
            return;
        }

        ServiceResult result = await QuestionnaireService.DeleteQuestionnaireAsync(questionnaireId);
        if (!result.Success)
        {
            SetFeedback(result);
            return;
        }

        RemoveFeedback();
        Questionnaires = await QuestionnaireViewModelService.GetQuestionnairesAsync();
    }
}
