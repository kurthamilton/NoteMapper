@page "/adm/users"
@inherits NoteMapperAdminComponentBase
@attribute [Authorize]

@using NoteMapper.Core
@using NoteMapper.Data.Core.Users
@using NoteMapper.Services.Feedback
@using NoteMapper.Services.Users
@using NoteMapper.Web.Blazor.Shared.Components

@if (Model == null)
{
    <Loading />
    return;
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/adm">Admin</a>
        </li>
        <li class="breadcrumb-item active">Users</li>
    </ol>
</nav>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Email</th>
            <th>Created</th>
            <th>Activated</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (User user in Model)
        {
            <tr>
                <td>@user.Email</td>
                <td>@user.CreatedUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@user.ActivatedUtc?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>
                    <button class="btn btn-outline-danger btn-sm"
                        @onclick="(e => DeleteUserAsync(user.UserId))">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@inject IFeedbackService FeedbackService
@inject IUserAdminService UserAdminService
@code {
    IReadOnlyCollection<User>? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model = await UserAdminService.GetUsersAsync();
    }

    async Task DeleteUserAsync(Guid userId)
    {
        if (!await ConfirmAsync("Are you sure you want to delete this user?"))
        {
            return;
        }

        ServiceResult result = await UserAdminService.DeleteUserAsync(userId);        
        FeedbackService.Notify(new FeedbackMessage(result));

        if (!result.Success)
        {
            return;
        }

        Model = await UserAdminService.GetUsersAsync();
    }
}
