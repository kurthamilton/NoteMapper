@page "/instruments/{id:guid}/edit"
@inherits NoteMapperComponentBase
@attribute [Authorize]

@using NoteMapper.Core
@using NoteMapper.Data.Core.Instruments
@using NoteMapper.Services.Instruments
@using NoteMapper.Services.Web.ViewModels.Instruments;
@using NoteMapper.Services.Web;
@using NoteMapper.Web.Blazor.Shared.Instruments
@using NoteMapper.Web.Blazor.Shared.Shared

<PageTitle>Edit instrument</PageTitle>

@if (Model == null)
{
    <Loading />
    return;
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/instruments">Instruments</a>
        </li>
        <li class="breadcrumb-item active">
            @UserInstrument?.Name
        </li>
    </ol>
</nav>

<Feedback Model="Feedback" />

<h1>Edit instrument</h1>

<EditForm Model="@Model" Context="editContext" OnValidSubmit="UpdateInstrumentAsync">
    <InstrumentForm Model="@Model" EditContext="@editContext" />

    <button class="btn btn-primary me-1">
        Update
    </button>

    <a class="btn btn-outline-secondary" href="/instruments">
        Cancel
    </a>
</EditForm>

@inject NavigationManager NavigationManager
@inject IUserInstrumentService UserInstrumentService
@inject IUserInstrumentViewModelService UserInstrumentViewModelService
@code {
    [Parameter]
    public Guid Id { get; set; }

    InstrumentEditViewModel? Model { get; set; }

    Guid UserId { get; set; }

    UserInstrument? UserInstrument { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Guid? userId = await GetCurrentUserIdAsync();
        if (userId == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        UserId = userId.Value;
        UserInstrument = await UserInstrumentService.FindUserInstrumentAsync(UserId, Id.ToString());

        if (UserInstrument == null)
        {
            NavigationManager.NavigateTo("/instruments");
            return;
        }

        Model = UserInstrumentViewModelService.MapUserInstrumentToEditViewModel(UserInstrument);
    }

    async Task UpdateInstrumentAsync()
    {
        if (Model == null || UserInstrument == null)
        {
            return;
        }

        UserInstrumentViewModelService.MapEditViewModelToUserInstrument(Model, UserInstrument);

        ServiceResult result = await UserInstrumentService.UpdateInstrumentAsync(UserId, UserInstrument);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/instruments");
            return;
        }

        SetFeedback(result);
    }
}
