@page "/instruments/create"
@inherits NoteMapperComponentBase
@layout ContentLayout
@attribute [Authorize]

@using NoteMapper.Core.Guitars;
@using NoteMapper.Core;
@using NoteMapper.Data.Core.Instruments;
@using NoteMapper.Services.Instruments;
@using NoteMapper.Services.Web.StateManagement;
@using NoteMapper.Services.Web.ViewModels.Instruments;
@using NoteMapper.Services.Web;
@using NoteMapper.Web.Blazor.Extensions;
@using NoteMapper.Web.Blazor.Models;
@using NoteMapper.Web.Blazor.Shared.Instruments
@using NoteMapper.Web.Blazor.Shared.Layouts;
@using NoteMapper.Web.Blazor.Shared.Shared

<PageTitle>Create instrument</PageTitle>

@if (Model == null)
{
    <Loading />
    return;
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/instruments">Instruments</a>
        </li>
        <li class="breadcrumb-item active">Create</li>
    </ol>
</nav>

<Feedback Model="Feedback" />

<h1>Create new instrument</h1>

<EditForm Model="@Model" OnValidSubmit="CreateInstrumentAsync" Context="editContext">
    <DataAnnotationsValidator />

    <InstrumentForm Model="@Model" EditContext="@editContext" />

    <button class="btn btn-primary me-1">
        Create
    </button>

    <a class="btn btn-outline-secondary" href="/instruments">
        Cancel
    </a>
</EditForm>

@inject NavigationManager NavigationManager
@inject IUserInstrumentService UserInstrumentService
@inject IUserInstrumentViewModelService UserInstrumentViewModelService
@code {
    InstrumentEditViewModel? Model { get; set; }

    UserInstrument? Template { get; set; }

    Guid UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Guid? userId = await GetCurrentUserIdAsync();
        if (userId == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        UserId = userId.Value;

        if (NavigationManager.TryGetQueryStringValue("template", out string template))
        {
            Template = await UserInstrumentService.FindUserInstrumentAsync(UserId, template);
        }

        if (Template == null)
        {
            Template = UserInstrumentService.GetNewUserInstrument(GuitarType.PedalSteelGuitar);
        }
        else
        {
            Template.Name += " (Copy)";
        }

        Model = UserInstrumentViewModelService.MapUserInstrumentToEditViewModel(Template);
    }

    async Task CreateInstrumentAsync()
    {
        if (Model == null || Template == null)
        {
            return;
        }

        UserInstrumentViewModelService.MapEditViewModelToUserInstrument(Model, Template);

        ServiceResult result = await UserInstrumentService.CreateInstrumentAsync(UserId, Template);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/instruments");
            return;
        }

        SetFeedback(result);
    }
}
