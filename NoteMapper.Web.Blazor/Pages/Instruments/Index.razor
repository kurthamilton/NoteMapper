@page "/instruments"
@inherits NoteMapperComponentBase
@layout ContentLayout

<PageTitle>Instruments</PageTitle>

@using System.Net;
@using NoteMapper.Core.Guitars
@using NoteMapper.Core;
@using NoteMapper.Data.Core.Instruments;
@using NoteMapper.Services
@using NoteMapper.Services.Instruments;
@using NoteMapper.Services.Web.StateManagement;
@using NoteMapper.Web.Blazor.Shared.Instruments;
@using NoteMapper.Web.Blazor.Shared.Layouts;
@using NoteMapper.Web.Blazor.Shared.Shared

<h1>Instruments</h1>

@if (DefaultInstruments == null || UserInstruments == null)
{
    <Loading />
    return;
}

<table class="table">
    <thead>
        <tr>
            <th>Name</th>

            @if (UserId != null)
            {
                <th></th>
            }            
        </tr>
    </thead>
    <tbody>
        @foreach (GuitarBase instrument in DefaultInstruments)
        {
            <tr>
                <td>
                    <a href="/instruments/@instrument.Id/view">@instrument.Name</a>
                </td>

                @if (UserId != null)
                {
                    <td>
                        <a href="/instruments/create?template=@instrument.Id"
                           class="btn btn-outline-primary btn-sm">
                            Copy
                        </a>
                    </td>
                }                
            </tr>
        }
    </tbody>

    @if (UserInstruments.Count > 0)
    {
        <tbody>
            <tr>
                <td colspan="2">
                    <h4>Custom</h4>
                </td>
            </tr>
            @foreach (GuitarBase instrument in UserInstruments)
            {
                <tr>
                    <td>
                        <a href="/instruments/@instrument.Id/edit">@instrument.Name</a>
                    </td>
                    <td>
                        <a href="/instruments/create?template=@instrument.Id"
                   class="btn btn-outline-primary btn-sm">
                            Copy
                        </a>
                        <button type="button" class="btn btn-outline-danger btn-sm"
                        @onclick="(e => DeleteInstrumentAsync(instrument.Id))">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    }
</table>

@if (UserId != null)
{
    <a class="btn btn-outline-primary btn-sm" href="/instruments/create">
        <i class="bi bi-plus-circle"></i>
        Create new instrument
    </a>
}
else
{
    <div class="d-flex align-items-center">
        <a href="/account/login" class="btn btn-primary">Login</a>
        <span class="mx-1">or</span>
        <a href="/account/register" class="btn btn-outline-primary">Register</a>
        <span class="mx-1">to create your own custom instrument.</span>
    </div>
}

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager;
@inject IUserInstrumentService UserInstrumentService
@code {
    IReadOnlyCollection<GuitarBase>? DefaultInstruments;
    IReadOnlyCollection<GuitarBase>? UserInstruments;

    Guid? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserId = await GetCurrentUserIdAsync();        

        DefaultInstruments = await UserInstrumentService.GetDefaultInstrumentsAsync();
        UserInstruments = UserId != null 
            ? await UserInstrumentService.GetUserInstrumentsAsync(UserId.Value)
            : Array.Empty<GuitarBase>();
    }

    async Task DeleteInstrumentAsync(string userInstrumentId)
    {
        if (UserId == null)
        {
            return;
        }

        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this instrument?"))
        {
            return;
        }        

        ServiceResult result = await UserInstrumentService.DeleteInstrumentAsync(UserId.Value, userInstrumentId);
        if (result.Success)
        {
            UserInstruments = await UserInstrumentService.GetUserInstrumentsAsync(UserId.Value);
        }
    }
}
