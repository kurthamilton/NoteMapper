@page "/contact"
@inherits NoteMapperComponentBase
@attribute [AllowAnonymous]

@using NoteMapper.Core
@using NoteMapper.Data.Core.Users
@using NoteMapper.Services.Web.Contact
@using NoteMapper.Services.Web.ViewModels.Contact
@using NoteMapper.Web.Blazor.Shared.Components
@using NoteMapper.Web.Blazor.Shared.Layouts

<ContentPage>
    <h1>Contact</h1>

    @if (Model == null)
    {
        <Loading />
        return;
    }

    <Feedback Model="@Feedback" />

    @if (Model != null && Feedback == null)
    {
        if (Model.Enabled)
        {
            <Recaptcha @ref="@RecaptchaComponent" />

            <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <fieldset disabled="@Submitting">
                    @if (User == null)
                    {
                        <div class="mb-3">
                            <label for="email" class="form-label required">Your email address</label>
                            <InputText id="email" type="email" @bind-Value="Model.Email" class="form-control" />
                            <ValidationMessage For="() => Model.Email" />
                        </div>
                    }
                    else
                    {
                        <input type="hidden" value="@User.Email" />
                    }

                    <div class="mb-3">
                        <label for="message" class="form-label required">Message</label>
                        <InputTextArea id="message" @bind-Value="Model.Message" class="form-control"></InputTextArea>
                        <ValidationMessage For="() => Model.Message" />
                    </div>

                    <button class="btn btn-primary">
                        Submit                    
                        @if (Submitting)
                        {
                            <ButtonSpinner />
                        }                    
                    </button>
                </fieldset>
            </EditForm>

            <p class="mt-3 small">
                This site is protected by reCAPTCHA and the Google
                <a href="https://policies.google.com/privacy" target="_blank">Privacy Policy</a> and
                <a href="https://policies.google.com/terms" target="_blank">Terms of Service</a> apply.
            </p>
        }    
        else
        {
            <div class="alert alert-danger">
                The contact form is currently closed
            </div>
        }
    }
    else if (Feedback != null)
    {
        <button class="btn btn-outline-secondary" @onclick="() => Feedback = null">Back</button>    
    }
</ContentPage>

@inject IContactService ContactService
@code {
    ContactRequestViewModel? Model { get; set; }

    Recaptcha? RecaptchaComponent { get; set; }

    bool Submitting { get; set; }

    User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await ContactService.GetContactRequestViewModelAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (Model == null || RecaptchaComponent == null)
        {
            return;
        }

        Submitting = true;

        ServiceResult recaptchaResult = await RecaptchaComponent.VerifyAsync();
        if (!recaptchaResult.Success)
        {
            Submitting = true;
            SetFeedback(recaptchaResult);
            return;
        }

        Submitting = false;

        ServiceResult result = await ContactService.SendContactRequestAsync(Model);
        SetFeedback(result);                
    }
}