@using NoteMapper.Core.Guitars;
@using NoteMapper.Core.Guitars.Implementations;
@using NoteMapper.Data.Core.Instruments;
@using NoteMapper.Web.Blazor.Models.Instruments;

@if (Model == null)
{
    return;
}

<fieldset disabled="@(ReadOnly ? "disabled" : null)">
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText @bind-Value="Model.Name" class="form-control" />
    </div>

    <table class="table table-sm align-middle table-bordered-body">
        <thead>
            <tr>
                <th></th>
                <th></th>

                @foreach (InstrumentModifierViewModel m in Model.Modifiers)
                {
                    <th>
                        @if (!ReadOnly)
                        {
                            <div class="d-flex justify-content-center mb-1">
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-secondary" 
                                            data-tooltip="Move left"
                                            @onclick="(e => MoveModifier(m, -1))">
                                        <i class="bi bi-caret-left-square"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm"
                                            @onclick="(e => RemoveModifierAsync(m))">
                                        <i class="bi bi-x-circle text-danger"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary"
                                    data-tooltip="Move right"
                                            @onclick="(e => MoveModifier(m, 1))">
                                        <i class="bi bi-caret-right-square"></i>
                                    </button>
                                </div>
                            </div>
                        }
                        <div>
                            <InputText @bind-Value="m.Name" class="form-control form-control-sm" />
                        </div>
                        @if (Model.ModifierTypes.Count > 0)
                        {
                            <div>
                                <select class="form-control form-control-sm" @bind="@m.Type">
                                    @foreach (string modifierType in Model.ModifierTypes)
                                    {
                                        <option>@modifierType</option>
                                    }
                                </select>
                            </div>
                        }                    
                    </th>
                }

                @if (!ReadOnly)
                {
                    <th>
                        <button type="button" class="btn btn-outline-primary btn-sm"
                            data-tooltip="Add modifier"
                            @onclick="(e => Model.AddModifier())">
                            &plus;
                        </button>
                    </th>
                }                
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Strings.Count; i++)
            {
                InstrumentStringViewModel s = Model.Strings.ElementAt(i);
                <tr>
                    <th>@(i + 1)</th>
                    <th>
                        <InputText @bind-Value="s.Note" class="form-control form-control-sm" />
                    </th>

                    @foreach (StringOffsetViewModel o in s.ModifierOffsets)
                    {
                        string? textClass = o.Offset < 0 ? "text-danger" : o.Offset > 0 ? "text-success" : null;

                        <td>
                            <div class="d-flex justify-content-between">
                                <span>
                                    @if (!ReadOnly)
                                    {
                                        <button class="btn btn-icon" @onclick="(e => o.Offset--)">
                                            <i class="bi bi-caret-left"></i>
                                        </button>
                                    }                                    
                                </span>
                                <span class="d-flex justify-content-center align-items-center @textClass">
                                    @for (int offset = 0; offset < Math.Abs(o.Offset); offset++)
                                    {
                                        <span>
                                            @if (o.Offset < 0)
                                            {
                                                <i class="bi bi-dash-circle-fill"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-plus-circle-fill"></i>
                                            }
                                        </span>
                                    }
                                </span>
                                <span>
                                    @if (!ReadOnly)
                                    {
                                        <button class="btn btn-icon" @onclick="(e => o.Offset++)">
                                            <i class="bi bi-caret-right"></i>
                                        </button>
                                    }                                    
                                </span>
                            </div>
                        </td>
                    }  
                    
                    @if (!ReadOnly)
                    {
                        <th>
                            <button type="button" class="btn btn-outline-danger btn-sm"                                    
                                    @onclick="(e => RemoveStringAsync(s))">
                                &times;
                            </button>
                        </th>
                    }
                </tr>
            }
        </tbody>
        
        @if (!ReadOnly)
        {
            <tfoot>
                <tr>
                    <td class="border-bottom-0"></td>
                    <td class="border-bottom-0">
                        <button type="button" class="w-100 btn btn-outline-primary btn-sm" 
                                data-tooltip="Add string"
                                @onclick="(e => Model.AddString())">
                            &plus;
                        </button>
                    </td>
                </tr>
            </tfoot>
        }        
    </table>

    @if (!ReadOnly)
    {
        <button class="btn btn-primary" @onclick="HandleSubmitAsync">
            @ButtonText
        </button>
    }    
</fieldset>

@inject IJSRuntime JsRuntime
@code {
    [Parameter]
    public string ButtonText { get; set; } = "";

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public UserInstrument? Template { get; set; }

    [Parameter]
    public EventCallback<UserInstrument> OnChange { get; set; }

    private InstrumentEditViewModel? Model { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<UserInstrument?>(nameof(Template), out UserInstrument? template))
        {
            Model = ToViewModel(template);            
        }

        await base.SetParametersAsync(parameters);
    }

    private static IEnumerable<UserInstrumentModifier> ToUserInstrumentModifiers(InstrumentEditViewModel viewModel)
    {
        for (int modifierIndex = 0; modifierIndex < viewModel.Modifiers.Count; modifierIndex++)
        {
            InstrumentModifierViewModel modifierViewModel = viewModel.Modifiers.ElementAt(modifierIndex);

            List<ModifierOffset> offsets = new();

            for (int stringIndex = 0; stringIndex < viewModel.Strings.Count; stringIndex++)
            {
                InstrumentStringViewModel stringViewModel = viewModel.Strings.ElementAt(stringIndex);
                StringOffsetViewModel offsetViewModel = stringViewModel.ModifierOffsets.ElementAt(modifierIndex);
                if (offsetViewModel.Offset == 0)
                {
                    continue;
                }

                offsets.Add(new ModifierOffset
                {
                    Offset = offsetViewModel.Offset,
                    String = stringIndex
                });
            }

            yield return new UserInstrumentModifier
            {
                Name = modifierViewModel.Name,
                Offsets = offsets,
                Type = modifierViewModel.Type
            };
        }        
    }

    private static UserInstrument ToUserInstrument(InstrumentEditViewModel viewModel)
    {
        return new UserInstrument
        {
            Modifiers = ToUserInstrumentModifiers(viewModel).ToArray(),
            Name = viewModel.Name,
            Strings = viewModel.Strings
                .Select(x => new UserInstrumentString
                {
                    Note = x.Note                    
                })
                .ToArray(),
            Type = viewModel.Type.ToString(),
            UserInstrumentId = viewModel.Id
        };
    }

    private static InstrumentEditViewModel? ToViewModel(UserInstrument? template)
    {
        if (template == null)
        {
            return null;
        }

        GuitarType type = Enum.Parse<GuitarType>(template.Type, true);
        InstrumentEditViewModel viewModel = new InstrumentEditViewModel(template.UserInstrumentId, type)
        {            
            Name = template.Name
        };

        for (int modifierIndex = 0; modifierIndex < template.Modifiers.Count; modifierIndex++)
        {
            UserInstrumentModifier modifier = template.Modifiers.ElementAt(modifierIndex);
            InstrumentModifierViewModel modifierViewModel = new InstrumentModifierViewModel
            {                
                Name = modifier.Name,
                Type = modifier.Type
            };

            viewModel.AddModifier(modifierViewModel);
        }

        for (int stringIndex = 0; stringIndex < template.Strings.Count; stringIndex++)
        {
            UserInstrumentString @string = template.Strings.ElementAt(stringIndex);
            InstrumentStringViewModel stringViewModel = new InstrumentStringViewModel
            {
                Note = @string.Note,
                Octave = 0
            };

            stringViewModel.SetModifierOffsetCount(template.Modifiers.Count);

            for (int modifierIndex = 0; modifierIndex < template.Modifiers.Count; modifierIndex++)
            {
                UserInstrumentModifier modifier = template.Modifiers.ElementAt(modifierIndex);
                ModifierOffset? offset = modifier.Offsets.FirstOrDefault(x => x.String == stringIndex);
                stringViewModel.ModifierOffsets.ElementAt(modifierIndex).Offset = offset != null
                    ? offset.Offset
                    : 0;
            }

            viewModel.AddString(stringViewModel);
        }

        return viewModel;
    }

    private Task HandleSubmitAsync()
    {
        if (Model == null)
        {
            return Task.CompletedTask;
        }

        UserInstrument userInstrument = ToUserInstrument(Model);
        return OnChange.InvokeAsync(userInstrument);
    }

    private void MoveModifier(InstrumentModifierViewModel m, int offset)
    {
        Model?.MoveModifier(m, offset);
    }

    private async Task RemoveModifierAsync(InstrumentModifierViewModel m)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this {m.Type}?"))
        {
            return;
        }

        Model?.RemoveModifier(m);
    }

    private async Task RemoveStringAsync(InstrumentStringViewModel s)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this instrument?"))
        {
            return;
        }

        Model?.RemoveString(s);
    }
}
