@using NoteMapper.Core.Extensions;
@using NoteMapper.Services.Web.ViewModels.Instruments;

@if (Model == null)
{
    return;
}

<div class="table-responsive mb-2">
    <table class="table w-auto table-sm">
        <thead>
            <tr>
                <th>Type</th>
                <th>Name</th>
                <th>Incompatible with</th>

                @if (!ReadOnly)
                {
                    <th></th>
                }            
            </tr>
        </thead>
        <tbody>
            @foreach (InstrumentModifierViewModel m in Model.Modifiers)
            {
                <tr>
                    <td>
                        @if (!ReadOnly)
                        {
                            <select class="form-control form-control-sm" @bind="@m.Type">
                                @foreach (string modifierType in Model.ModifierTypeOptions)
                                {
                                    <option>@modifierType</option>
                                }
                            </select>
                        }        
                        else
                        {
                            @m.Type
                        }
                    </td>
                    <td>
                        @if (!ReadOnly)
                        {
                            <InputText @bind-Value="m.Name" class="form-control form-control-sm"
                                tabindex="@(Model.Modifiers.IndexOf(m) + 1)" />
                        }       
                        else
                        {
                            @m.Name
                        }
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            @for (int i = 0; i < Model.Modifiers.Count; i++)
                            {
                                InstrumentModifierViewModel modifier = Model.Modifiers.ElementAt(i);
                                if (m.Type != modifier.Type)
                                {
                                    continue;
                                }

                                bool isSelf = modifier == m;
                                bool disabled = ReadOnly || isSelf;
                                bool incompatible = m.IncompatibleModifiers.Contains(modifier);
                                string cssClass = isSelf
                                    ? "btn-outline-secondary" 
                                    : incompatible 
                                    ? "btn-danger" 
                                    : "btn-outline-danger";
                               
                                <button class="btn @cssClass"
                                        disabled="@disabled"
                                        @onclick="() => ToggleIncompatibleModifier(m, modifier)">
                                    @modifier.Name
                                </button>
                            }
                        </div>
                    </td>

                    @if (!ReadOnly)
                    {
                        <td>
                            <div class="d-none d-md-block">
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="(e => ReorderModifier(m, -1))">
                                        <i class="bi bi-caret-up"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="(e => ReorderModifier(m, 1))">
                                        <i class="bi bi-caret-down"></i>
                                    </button>
                                </div>

                                <button type="button" class="btn btn-outline-danger btn-sm"
                                        @onclick="(e => RemoveModifier(m))">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                            </div>

                            <div class="d-md-none">
                                <div class="dropdown p-0">
                                    <button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li>
                                            <button type="button" class="dropdown-item"
                                                    @onclick="(e => ReorderModifier(m, -1))">
                                                <i class="bi bi-caret-up"></i>
                                                Move up
                                            </button>
                                            <button type="button" class="dropdown-item"
                                                    @onclick="(e => ReorderModifier(m, 1))">
                                                <i class="bi bi-caret-down"></i>
                                                Move down
                                            </button>
                                            <button type="button" class="dropdown-item "
                                                    @onclick="(e => RemoveModifier(m))">
                                                <i class="bi bi-x-circle text-danger"></i>
                                                Delete
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </td>
                    }                
                </tr>
            }
        </tbody>

        @if (!ReadOnly)
        {
            <tfoot>
                <tr>
                    <td>
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-primary btn-sm w-100"
                            @onclick="(e => AddModifier())">
                            <i class="bi bi-plus-circle"></i>
                            Add modifier
                        </button>
                    </td>
                    <td colspan="2">
                    </td>
                </tr>
            </tfoot>
        }    
    </table>
</div>

@inject IJSRuntime JsRuntime
@code {
    [Parameter]
    public InstrumentEditViewModel? Model { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    void AddModifier()
    {
        Model?.AddModifier();
    }

    async Task RemoveModifier(InstrumentModifierViewModel modifier)
    {
        if (Model == null)
        {
            return;
        }

        if (!await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this modifier?"))
        {
            return;
        }

        Model.RemoveModifier(modifier);
    }

    void ReorderModifier(InstrumentModifierViewModel modifier, int direction)
    {
        Model?.MoveModifier(modifier, direction);
    }

    void ToggleIncompatibleModifier(InstrumentModifierViewModel modifier, InstrumentModifierViewModel other)
    {
        Model?.ToggleIncompatibleModifier(modifier, other);
    }
}
