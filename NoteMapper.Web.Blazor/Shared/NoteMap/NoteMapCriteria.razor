@using NoteMapper.Core
@using NoteMapper.Core.Guitars;
@using NoteMapper.Core.MusicTheory
@using NoteMapper.Core.NoteMap;
@using NoteMapper.Services.Web.ViewModels.NoteMap

@if (Options == null)
{
    return;
}

<div class="form-inline d-block d-sm-flex">
    <div class=form-group>
        <label for="instrument">Instrument</label>
        <select class="form-control" id="instrument" value="@Model.InstrumentId" @onchange="OnInstrumentChange">
            @foreach (GuitarBase instrument in Options.DefaultInstruments)
            {
                <option value="@instrument.Id">@instrument.Name</option>
            }

            @if (Options.UserInstruments.Count > 0)
            {
                <option disabled>----------</option>

                @foreach (GuitarBase instrument in Options.UserInstruments)
                {
                    <option value="@instrument.Id">@instrument.Name</option>
                }
            }
        </select>
    </div>

    <div class="form-inline">
        <div class=form-group>
            <label for="key">Key</label>
            <div class="d-flex">
                <select class="form-control" id="key" value="@Model.KeyName" @onchange="OnKeyNameChange">
                    @foreach (string name in Options.KeyNames)
                    {
                        <option>@name</option>
                    }
                </select>
                <select class="form-control" id="key" value="@Model.ScaleType" @onchange="OnScaleTypeChange">
                    @foreach (string type in Options.ScaleTypes)
                    {
                        <option>@type</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            <label for="type">Type</label>
            <select class="form-control" id="type" value="@Model.Type.ToString()" @onchange="OnTypeChange">
                @foreach (NoteMapType type in Options.Types)
                {
                    <option>@type.ToString()</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="mode">Mode</label>
            <select class="form-control" id="mode" value="@Model.Mode.ToString()" @onchange="OnModeChange">
                <option>@(NoteMapMode.Permutations.ToString())</option>
                <option>@(NoteMapMode.Manual.ToString())</option>
            </select>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public NoteMapCriteriaOptionsViewModel? Options { get; set; }

    [Parameter]
    public EventCallback<NoteMapCriteriaViewModel> OnChange { get; set; }

    [Parameter]
    public NoteMapCriteriaViewModel Model { get; set; } = new NoteMapCriteriaViewModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    Task OnInstrumentChange(ChangeEventArgs e)
    {
        Model.InstrumentId = (string?)e.Value;
        return EmitChange();
    }

    Task OnKeyNameChange(ChangeEventArgs e)
    {
        Model.KeyName = (string?)e.Value;
        return EmitChange();
    }

    Task OnModeChange(ChangeEventArgs e)
    {
        string value = (string?)e.Value ?? "";
        NoteMapMode mode = Enum.Parse<NoteMapMode>(value, true);
        Model.Mode = Enum.IsDefined<NoteMapMode>(mode) ? mode : default;
        return EmitChange();
    }

    Task OnScaleTypeChange(ChangeEventArgs e)
    {
        Model.ScaleType = (string?)e.Value;
        return EmitChange();
    }

    Task OnTypeChange(ChangeEventArgs e)
    {
        string value = (string?)e.Value ?? "";
        NoteMapType type = Enum.Parse<NoteMapType>(value, true);
        Model.Type = Enum.IsDefined<NoteMapType>(type) ? type : default;
        return EmitChange();
    }

    Task EmitChange()
    {
        return OnChange.InvokeAsync(Model);
    }
}
