@using NoteMapper.Core.Instruments;
@using NoteMapper.Web.Blazor.Models.NoteMap;

@if (Instrument == null)
{
    return;
}

<div class="btn-toolbar">
    <div class="btn-group me-3">
        <button class="btn btn-outline-secondary @(CanZoom(1) ? "" : "disabled")"
                @onclick="e => Zoom(1)">
            <span class="bi bi-zoom-out" aria-hidden="true"></span>
        </button>

        <button class="btn btn-outline-secondary @(CanZoom(-1) ? "" : "disabled")"
                @onclick="e => Zoom(-1)">
            <span class="bi bi-zoom-in" aria-hidden="true"></span>
        </button>
    </div>
    <div class="btn-group">
        <button class="btn btn-outline-secondary @(CanMove(-1) ? "" : "disabled")"
                @onclick="e => Move(-1)">
            <span class="bi bi-caret-left" aria-hidden="true"></span>
        </button>

        <button class="btn btn-outline-secondary @(CanMove(1) ? "" : "disabled")"
                @onclick="e => Move(+1)">
            <span class="bi bi-caret-right" aria-hidden="true"></span>
        </button>
    </div>
</div>

@code{
    [Parameter]
    public StringedInstrumentBase? Instrument { get; set; }

    [Parameter]
    public EventCallback<NoteMapZoomViewModel> OnChange { get; set; }

    int EndPosition { get; set; }
    int LastPosition { get; set; }
    int StartPosition { get; set; }
    int TotalPositions { get; set; }
    int VisiblePositions { get; set; }

    private StringedInstrumentBase? PreviousInstrument { get; set; }

    protected override void OnParametersSet()
    {
        if (Instrument == null || Instrument == PreviousInstrument)
        {
            return;
        }

        TotalPositions = Instrument.Positions + 1;
        VisiblePositions = TotalPositions;
        StartPosition = 0;
        LastPosition = Instrument.Positions;
        EndPosition = LastPosition;

        PreviousInstrument = Instrument;
        TriggerChange();
    }

    private bool CanMove(int offset)
    {
        if (offset == 0)
        {
            return false;
        }

        return offset < 0 
            ? StartPosition + offset >= 0 
            : EndPosition + offset <= LastPosition;
    }

    private bool CanZoom(int offset)
    {
        if (offset == 0)
        {
            return false;
        }

        return offset < 0
            ? VisiblePositions + offset >= 1
            : VisiblePositions + offset <= TotalPositions;
    }

    private async Task Move(int offset)
    {
        if (!CanMove(offset))
        {
            return;
        }

        StartPosition += offset;
        EndPosition += offset;

        await TriggerChange();
    }

    private Task TriggerChange()
    {
        return OnChange.InvokeAsync(new NoteMapZoomViewModel
        {
            EndPosition = EndPosition,
            StartPosition = StartPosition
        });
    }

    private async Task Zoom(int offset)
    {
        if (!CanZoom(offset))
        {
            return;
        }

        VisiblePositions += offset;

        if (offset < 0)
        {
            EndPosition += offset;
        }
        else
        {
            if (CanMove(offset))
            {
                EndPosition += offset;
            }
            else
            {
                StartPosition -= offset;
            }
        }

        await TriggerChange();
    }
}